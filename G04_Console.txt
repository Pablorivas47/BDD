-- //////////////////////// TPE BDD  ////////////////////////



-- TABLA Cliente:
ALTER TABLE Cliente ADD CONSTRAINT ck_saldo_no_negativo
CHECK (saldo >= 0);
-- Justificación: Este CHECK se asegura de que ningún cliente tenga un saldo negativo. El saldo de la cuenta del
-- cliente debe mantenerse siempre el positivo ya que no se aceptan deudas.

-- TABLA Comprobante:
ALTER TABLE Comprobante ADD CONSTRAINT ck_fecha_vencimiento
CHECK (fecha_vencimiento >= fecha);
-- Justificación: Este CHECK garantiza que la fecha de vencimiento de un comprobante sea igual o posterior a la
-- fecha de emisión. Que la fecha de vencimiento de un comprobante sea mayor a la fecha en la que se crea es incoherente.

ALTER TABLE Comprobante ADD CONSTRAINT ck_importe_positivo
CHECK (importe >= 0);
-- Justificación: Este CHECK asegura que el importe de un comprobante debe ser un valor positivo o cero, dejando
-- en claro que no se pueden crear comprobantes con importes negativos.

-- TABLA Equipo:
ALTER TABLE Equipo ADD CONSTRAINT ck_fecha_limite
CHECK (fecha_alta < fecha_baja);
-- Justificación: Este CHECK se garantiza de que la fecha de baja de un equipo ocurra después de su fecha de alta.
-- Esto asegura que los períodos de uso de los equipos sean válidos, evitando situaciones donde el equipo esté
-- dado de baja antes de haber sido dado de alta.

-- TABLA LineaComprobante:
ALTER TABLE LineaComprobante ADD CONSTRAINT ck_cantidad_no_negativa
CHECK (cantidad > 0);
-- Justificación: Este CHECK asegura que la cantidad de un producto o servicio en una línea de comprobante sea siempre
-- positiva. Registrar una cantidad negativa sería incoherente ya que estamos hablando de una compra real de productos.

ALTER TABLE LineaComprobante ADD CONSTRAINT ck_importe_positivo
CHECK (importe > 0);
-- Justificación: Este CHECK asegura que el importe asociado a cada línea de comprobante sea positivo.
-- Un valor negativo en el importe representa un error de cálculo.

ALTER TABLE Servicio ADD CONSTRAINT ck_costo_positivo
CHECK (costo >= 0);
-- Justificación: Este CHECK asegura que el costo de un servicio no puede ser negativo. Esto se realiza para garantizar
-- que el valor asignado a los servicios sea positivo, evitando así el ingreso erróneo	de valores.

ALTER TABLE Turno ADD CONSTRAINT ck_fecha_limite
CHECK (desde < hasta);
-- Justificación: Este CHECK asegura que un turno tenga una duración válida, es decir, que la hora de inicio sea antes
-- que la de finalización. Que un turno termine antes de comenzar es incoherente.

ALTER TABLE Turno ADD CONSTRAINT ck_dinero_positivo
CHECK (dinero_inicio > 0 AND dinero_fin > 0);
-- Justificación: Este CHECK garantiza que tanto el dinero al inicio como al final del turno sean valores positivos.
-- Esto previene inconsistencias, y asegura que por más que se realicen gastos el dinero final nunca sea negativo, por lo que no se podría realizar una compra sin tener el dinero suficiente.


-- ---------------- Insert y Delete tuplas ----------------

-- //////////////////////// DELETE DE TABLAS  ////////////////////////
DELETE FROM Persona
WHERE id_persona = 3;

DELETE FROM Cliente
WHERE id_cliente = 1;

DELETE FROM Comprobante
WHERE id_comp = 6;

DELETE FROM lineacomprobante
WHERE id_comp = 6;

UPDATE Persona
SET id_persona = 2
WHERE id_persona = 3;




-- ---------------- Inciso 1) a ----------------

ALTER TABLE Persona
ADD CONSTRAINT chk_fecha_baja
CHECK (
    (activo = true AND fecha_baja IS NULL) OR
    (activo = false AND fecha_baja IS NOT NULL AND fecha_baja >= fecha_alta + INTERVAL '6 months')
);

SELECT per.id_persona, per.activo,per.fecha_alta, per.fecha_baja FROM persona per
WHERE per.activo = true;

UPDATE persona SET activo = false WHERE id_persona = 1;


-- //////////////////////// 1-b Tuplas para check  ////////////////////////

-- ---------------- Inciso 1) b ----------------

SELECT c.id_comp, c.id_tcomp, c.importe
FROM Comprobante c
LEFT JOIN LineaComprobante lc Using(id_comp,id_tcomp)
GROUP BY c.id_comp, c.id_tcomp, c.importe
HAVING c.importe = COALESCE(SUM(lc.importe), 0);

-- las lineas comprobantes c.id_comp = 446 and c.id_tcomp =1 son 3 por lo tanto en comprobante el monto
-- se actualiza en funcion a la suma de las 3 lineas

SELECT lc.importe, lc.id_comp, lc.id_tcomp FROM lineacomprobante lc
WHERE lc.id_comp = 446 and lc.id_tcomp =1 ;

SELECT c.importe, c.id_comp, c.id_tcomp FROM comprobante c
WHERE c.id_comp = 446 and c.id_tcomp =1 ;

UPDATE lineacomprobante
SET importe = 69
WHERE id_tcomp = 1 and id_comp = 446;

UPDATE lineacomprobante
SET id_comp = 446
WHERE id_tcomp = 1 and id_comp = 325;

--////////// Comprobante //////////

CREATE OR REPLACE FUNCTION func_verificar_importe_comprobante()
RETURNS TRIGGER AS $$
DECLARE
    total_importe NUMERIC;
BEGIN
    -- Calcular la suma de los importes de las líneas del comprobante
    SELECT COALESCE(SUM(lc.importe), 0) INTO total_importe
    FROM LineaComprobante lc
    WHERE lc.id_comp = NEW.id_comp AND lc.id_tcomp = NEW.id_tcomp;

    IF tg_op = 'UPDATE' THEN
        -- Verificar si el importe del comprobante coincide con el total
        IF NEW.importe <> total_importe THEN
            RAISE EXCEPTION 'El i mporte del comprobante debe ser igual a la suma de los importes de las líneas. Se esperaba %. Se recibió %.', total_importe, NEW.importe;
        END IF;
    END if;

    IF tg_op = 'INSERT' THEN
        -- Verificar si el total_importe es 0
        IF total_importe = 0 AND NEW.importe <> 0 THEN
            RAISE EXCEPTION 'El total de importes de las líneas es 0. No se puede crear o actualizar el comprobante.';
        END IF;
    END if;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trigger_verificar_importe_insert
AFTER INSERT OR UPDATE ON Comprobante
FOR EACH ROW
EXECUTE FUNCTION func_verificar_importe_comprobante();

--////////// Linea comprobante //////////

CREATE OR REPLACE FUNCTION func_actualizar_importe_comprobante()
RETURNS TRIGGER AS $$
DECLARE
    total_importe NUMERIC;
    v_id_comp BIGINT;
    v_id_tcomp INT;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_id_comp := OLD.id_comp;
        v_id_tcomp := OLD.id_tcomp;
    ELSE
        v_id_comp := NEW.id_comp;
        v_id_tcomp := NEW.id_tcomp;
    END IF;

    -- Calcular la suma total de importes de las líneas del comprobante
    SELECT COALESCE(SUM(importe), 0) INTO total_importe
    FROM LineaComprobante
    WHERE id_comp = v_id_comp AND id_tcomp = v_id_tcomp;

    -- Actualizar el importe del comprobante
    UPDATE Comprobante
    SET importe = total_importe
    WHERE id_comp = v_id_comp AND id_tcomp = v_id_tcomp;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trigger_actualizar_importe
AFTER INSERT OR UPDATE OR DELETE ON LineaComprobante
FOR EACH ROW
EXECUTE FUNCTION func_actualizar_importe_comprobante();

-- ---------------- Inciso 1) c ----------------
-- ya le asigne la ip al cliente 34
UPDATE equipo
SET ip = '192.168.0.1'
WHERE id_cliente = 34;

-- cuando se la queremos asignar la misma ip al cliente 33, salta el trigger
UPDATE equipo
SET ip = '192.168.0.1'
WHERE id_cliente = 33;

CREATE OR REPLACE FUNCTION func_verificar_ip_unica()
RETURNS TRIGGER AS $$
BEGIN
    -- Verificar si la IP ya está asignada a otro cliente
     IF EXISTS ( SELECT 1
         FROM Equipo
         WHERE ip = NEW.ip
           AND id_cliente <> NEW.id_cliente
         -- En este caso no chequeamos que la persona este activa o no.
         -- A las personas inactivas le asignamos de igual manera una IP dandole la oportunidad de activarse
     ) THEN
         RAISE EXCEPTION 'La IP % ya está asignada a otro cliente.', NEW.ip;
     END IF;

     RETURN NEW;
 END;
 $$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_verificar_ip
BEFORE INSERT OR UPDATE ON Equipo
FOR EACH ROW
EXECUTE FUNCTION func_verificar_ip_unica();


-- //////////////////////// 2-a  ////////////////////////

-- es para que se setee automaticamente el id del comprobante, sin tener que verificar cual falta
CREATE SEQUENCE comprobante_seq
    START WITH 1 -- Empieza desde 1
    INCREMENT BY 1 -- Incrementa de 1 en 1
    NO MAXVALUE; -- Sin límite máximo


CREATE OR REPLACE PROCEDURE proce_generar_facturas_servicios(fecha_factura DATE)
LANGUAGE 'plpgsql' AS
$body$
DECLARE
    r_servicio RECORD;
    r_equipo RECORD;
    v_id_comp BIGINT;
    v_id_tcomp INT := 1; -- Asumimos un tipo de comprobante
    v_fecha TIMESTAMP := fecha_factura; -- Utilizamos la fecha pasada como parámetro
BEGIN
    -- Seleccionamos todos los servicios periódicos activos
    FOR r_servicio IN
        SELECT id_servicio, nombre, costo, intervalo, tipo_intervalo
        FROM Servicio
        WHERE periodico = TRUE AND activo = TRUE
    LOOP
        -- Para cada servicio periódico, buscamos los equipos asociados a clientes
        FOR r_equipo IN
            SELECT id_cliente, id_servicio
            FROM Equipo e
            WHERE id_servicio = r_servicio.id_servicio AND id_cliente IS NOT NULL
                AND EXISTS (
                SELECT 1
                FROM Cliente c
                WHERE c.id_cliente = e.id_cliente
                  AND EXISTS (
                  SELECT 1
                  FROM Persona p
                  WHERE p.id_persona = c.id_cliente
                    AND p.activo = TRUE
                  )
                )
        LOOP
            -- Generar ID único para el comprobante
            v_id_comp := nextval('comprobante_seq'); -- Verifica que la secuencia exista

            -- Insertar el comprobante inicialmente con importe = 0
            INSERT INTO Comprobante (id_comp,id_tcomp,fecha,comentario,estado,fecha_vencimiento,importe, id_cliente,id_lugar)
            VALUES (
                v_id_comp,
                v_id_tcomp,
                v_fecha, -- Utilizar la fecha pasada como parámetro
                'Factura generada automáticamente para el servicio ' || r_servicio.nombre,
                'Pendiente', -- Estado de la factura
                v_fecha + INTERVAL '1 month', -- Fecha de vencimiento (un mes después)
                0, -- Importante: Se inserta con importe 0
                r_equipo.id_cliente,
                NULL -- Asumimos que no hay lugar asociado
            );

            -- Insertar la línea del comprobante para el servicio facturado
            INSERT INTO LineaComprobante (nro_linea,id_comp, id_tcomp,descripcion,cantidad,importe,id_servicio)
            VALUES (
                1, -- Primera línea del comprobante
                v_id_comp,
                v_id_tcomp,
                'Servicio: ' || r_servicio.nombre || ', Periodo: ' || r_servicio.intervalo || ' ' || r_servicio.tipo_intervalo,
                1, -- Cantidad de servicios facturados
                r_servicio.costo, -- Importe del servicio
                r_servicio.id_servicio
            );
        END LOOP;
    END LOOP;

    -- Mensaje para indicar éxito en la generación de facturas
    RAISE NOTICE 'Facturas generadas correctamente para la fecha: %', v_fecha;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error al generar las facturas: %', SQLERRM;
END;
$body$;

CALL proce_generar_facturas_servicios(to_date('2024-10-01', 'yyyy-mm-dd'));

--////////////// Trigger sin el importe en 0, debido la restriccion del inciso 1-b /////////////////////
-- CREATE OR REPLACE PROCEDURE generar_facturas_servicios(fecha_factura DATE)
-- LANGUAGE 'plpgsql' AS
-- $body$
-- DECLARE
--     r_servicio RECORD;
--     r_equipo RECORD;
--     v_id_comp BIGINT;
--     v_id_tcomp INT := 1; -- Asumimos un tipo de comprobante
--     v_fecha TIMESTAMP := fecha_factura; -- Utilizamos la fecha pasada como parámetro
-- BEGIN
--     -- Seleccionamos todos los servicios periódicos activos
--     FOR r_servicio IN
--         SELECT id_servicio, nombre, costo, intervalo, tipo_intervalo
--         FROM Servicio
--         WHERE periodico = TRUE AND activo = TRUE
--     LOOP
--         -- Para cada servicio periódico, buscamos los equipos asociados a clientes
--         FOR r_equipo IN
--             SELECT id_cliente, id_servicio
--             FROM Equipo
--             WHERE id_servicio = r_servicio.id_servicio AND id_cliente IS NOT NULL
--         LOOP
--             -- Generar ID único para el comprobante
--             v_id_comp := nextval('comprobante_seq'); -- Verifica que la secuencia exista
--
--             -- Insertar el comprobante
--             INSERT INTO Comprobante (id_comp, id_tcomp, fecha, comentario, estado, fecha_vencimiento, importe, id_cliente, id_lugar)
--             VALUES (
--                 v_id_comp,
--                 v_id_tcomp,
--                 v_fecha, -- Utilizar la fecha pasada como parámetro
--                 'Factura generada automáticamente para el servicio ' || r_servicio.nombre,
--                 'Pendiente', -- Estado de la factura
--                 v_fecha + INTERVAL '1 month', -- Fecha de vencimiento (un mes después)
--                 r_servicio.costo, -- Importe del servicio
--                 r_equipo.id_cliente,
--                 NULL -- Asumimos que no hay lugar asociado
--             );
--
--             -- Insertar la línea del comprobante para el servicio facturado
--             INSERT INTO LineaComprobante (nro_linea, id_comp, id_tcomp, descripcion, cantidad, importe, id_servicio)
--             VALUES (
--                 1, -- Primera línea del comprobante
--                 v_id_comp,
--                 v_id_tcomp,
--                 'Servicio: ' || r_servicio.nombre || ', Periodo: ' || r_servicio.intervalo || ' ' || r_servicio.tipo_intervalo,
--                 1, -- Cantidad de servicios facturados
--                 r_servicio.costo, -- Importe del servicio
--                 r_servicio.id_servicio
--             );
--         END LOOP;
--     END LOOP;
--
--     -- Mensaje para indicar éxito en la generación de facturas
--     RAISE NOTICE 'Facturas generadas correctamente para la fecha: %', v_fecha;
-- EXCEPTION
--     WHEN OTHERS THEN
--         RAISE EXCEPTION 'Error al generar las facturas: %', SQLERRM;
-- END;
-- $body$;
--
-- -- Llamada al procedimiento con la fecha de facturación
-- CALL generar_facturas_servicios(to_date('2024-10-01', 'yyyy-mm-dd'));

-- //////////////////////// 2-b  ////////////////////////
-- Al ser invocado entre dos fechas cualesquiera genere un informe de los empleados
-- (personal) junto con la cantidad de clientes distintos que cada uno ha atendido en tal periodo y
-- los tiempos promedio y máximo del conjunto de turnos atendidos en el periodo.


SELECT p.nombre, p.apellido, p.activo, p.tipo FROM persona p
WHERE id_persona = 19;

SELECT per.id_personal, per.id_rol FROM personal per
WHERE per.id_personal = 19;

SELECT r.id_rol, r.nombre FROM rol r
WHERE r.id_rol = 1;

SELECT t.id_personal, t.id_turno FROM turno t
WHERE t.desde BETWEEN to_date('2000-01-01', 'yyyy-mm-dd') AND to_date('2008-12-31', 'yyyy-mm-dd') AND t.id_personal = 19;

SELECT c.id_cliente, c.id_turno FROM comprobante c
WHERE c.id_turno IN (5,12,44, 137,160);

-- podemos ver que devuelve 12 clientes distintos, ya que el 69 lo repite
-- este es el paso a paso como fui chequeando que el trigger anduviera como corresponde

CREATE OR REPLACE FUNCTION funcion_generar_informe_empleados(fecha_inicio DATE, fecha_fin DATE)
RETURNS TABLE (
    nombre_empleado VARCHAR,
    apellido_empleado VARCHAR,
    cantidad_clientes INT,
    tiempo_promedio INTERVAL,
    tiempo_maximo INTERVAL
) LANGUAGE 'plpgsql' AS
$body$
DECLARE
    r_personal RECORD; -- Registro de empleados
    cantidad_clientes INT; -- Variable para la cantidad de clientes distintos
    tiempo_promedio INTERVAL; -- Variable para el tiempo promedio
    tiempo_maximo INTERVAL; -- Variable para el tiempo máximo
BEGIN
    -- Seleccionamos los empleados que tienen turnos entre las fechas dadas
    FOR r_personal IN
        SELECT p.id_personal, per.nombre, per.apellido
        FROM Personal p
        JOIN Persona per ON p.id_personal = per.id_persona
        WHERE EXISTS (
            SELECT 1
            FROM Turno t
            WHERE t.id_personal = p.id_personal
            AND t.desde BETWEEN fecha_inicio AND fecha_fin
        ) and per.tipo = 'P' AND per.activo = TRUE
    LOOP
        -- Contamos la cantidad de clientes distintos atendidos por el empleado en el período
        SELECT COUNT(DISTINCT c.id_cliente)
        INTO cantidad_clientes
        FROM Turno t
        JOIN Comprobante c ON c.id_turno = t.id_turno
        WHERE t.id_personal = r_personal.id_personal
        AND t.desde BETWEEN fecha_inicio AND fecha_fin;

        -- Calculamos el tiempo promedio y máximo de los turnos atendidos por el empleado en el período
        SELECT AVG(t.hasta - t.desde), MAX(t.hasta - t.desde)
        INTO tiempo_promedio, tiempo_maximo
        FROM Turno t
        WHERE t.id_personal = r_personal.id_personal
        AND t.desde BETWEEN fecha_inicio AND fecha_fin;

        -- Devolvemos los resultados
        RETURN QUERY SELECT r_personal.nombre, r_personal.apellido,
                        COALESCE(cantidad_clientes, 0),
                        COALESCE(tiempo_promedio, INTERVAL '0 seconds'),
                        COALESCE(tiempo_maximo, INTERVAL '0 seconds');
    END LOOP;

    -- Mensaje final de éxito (opcional)
    RAISE NOTICE 'Informe generado correctamente entre las fechas: % y %', fecha_inicio, fecha_fin;
END;
$body$;

-- Llamar a la función y obtener los resultados
SELECT * FROM funcion_generar_informe_empleados(to_date('2000-01-01', 'yyyy-mm-dd'), to_date('2008-12-31', 'yyyy-mm-dd'));

-- ////////////////////////  3-a  ////////////////////////
/*
Vista1, que contenga el saldo de cada uno de los clientes menores de 30 años de la ciudad 'Napoli',
que posean más de 3 servicios.
*/

-- Insertar en la tabla Servicio (con más de 3 servicios asociados)

SELECT c.id_cliente, c.saldo
FROM Cliente c
JOIN Persona p ON c.id_cliente = p.id_persona
JOIN Direccion d ON p.id_persona = d.id_persona
JOIN Barrio b ON d.id_barrio = b.id_barrio
JOIN Ciudad ci ON b.id_ciudad = ci.id_ciudad
JOIN Equipo e ON c.id_cliente = e.id_cliente
WHERE ci.nombre = 'Napoli'
AND p.fecha_nacimiento > CURRENT_DATE - INTERVAL '30 years'
GROUP BY c.id_cliente, c.saldo
HAVING COUNT(e.id_servicio) > 3;

CREATE OR REPLACE VIEW Vista1 AS
SELECT c.id_cliente, c.saldo
FROM Cliente c
WHERE c.id_cliente IN ( SELECT p.id_persona
                        FROM Persona p
                        WHERE p.fecha_nacimiento > CURRENT_DATE - INTERVAL '30 years'
                        AND p.id_persona IN (   SELECT e.id_cliente
                                                FROM Equipo e
                                                GROUP BY e.id_cliente
                                                HAVING COUNT(e.id_servicio) > 3
                                                )
                        AND p.id_persona IN (   SELECT d.id_persona
                                                FROM Direccion d
                                                WHERE d.id_barrio IN (  SELECT b.id_barrio
                                                                        FROM Barrio b
                                                                        WHERE b.id_ciudad IN (  SELECT ci.id_ciudad
                                                                                                FROM Ciudad ci
                                                                                                WHERE ci.nombre = 'Napoli'
                                                                                                )
                                                                        )
                                                  )
                           );

SELECT * FROM Vista1;

-- ////////////////////////  3-b  ////////////////////////
/*
Vista2, con los datos de los clientes activos del sistema que hayan sido dados de alta en el
año actual y que poseen al menos un servicio activo, incluyendo el/los servicio/s activo/s que
cada uno posee y su costo.
*/

SELECT c.id_cliente, c.saldo as saldo_cliente,s.nombre, s.id_servicio, s.costo as costo_servicio, s.activo
FROM Cliente c
JOIN Persona p ON c.id_cliente = p.id_persona
JOIN Equipo e ON c.id_cliente = e.id_cliente
JOIN Servicio s ON e.id_servicio = s.id_servicio
WHERE extract(YEAR FROM p.fecha_alta)  = extract(YEAR FROM now())
  AND p.activo = true
  AND s.activo = true;

CREATE OR REPLACE VIEW Vista2 AS
SELECT c.id_cliente, c.saldo as saldo_cliente,s.nombre, s.id_servicio, s.costo as costo_servicio, s.activo
FROM Cliente c
JOIN Persona p ON c.id_cliente = p.id_persona
JOIN Equipo e ON c.id_cliente = e.id_cliente
JOIN Servicio s ON e.id_servicio = s.id_servicio
WHERE extract(YEAR FROM p.fecha_alta)  = extract(YEAR FROM now())
  AND p.activo = true
  AND s.activo = true;

/*CREATE OR REPLACE FUNCTION funcion_trigger_vista2()
RETURNS TRIGGER AS $$
BEGIN
    IF ()

    RETURN OLD;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_vista2
INSTEAD OF DELETE ON Vista2
FOR EACH ROW
EXECUTE FUNCTION funcion_trigger_vista2();

DELETE FROM Vista2 v
WHERE v.id_cliente = 1;
*/

-- Vista3, que contenga, por cada uno de los servicios periódicos registrados en el sistema, los datos del
-- servicio y el monto facturado mensualmente durante los últimos 5 años, ordenado por servicio, año, mes y monto.

CREATE OR REPLACE VIEW Vista3 AS
SELECT s.* , SUM(lc.importe) AS monto_facturado_mensual ,DATE_PART('year', c.fecha) AS anio , DATE_PART('month', c.fecha) AS mes
FROM servicio s
JOIN equipo e USING (id_servicio)
JOIN lineacomprobante lc USING (id_servicio)
JOIN comprobante c USING (id_comp, id_tcomp)
WHERE s.periodico = true AND  c.fecha >= NOW() - INTERVAL '5 years'
GROUP BY s.id_servicio, s.nombre, s.periodico, s.costo, s.intervalo, s.tipo_intervalo, s.activo, s.id_cat, DATE_PART('year', c.fecha) , DATE_PART('month', c.fecha)
ORDER BY s.nombre, anio, mes , monto_facturado_mensual;

SELECT s.* , SUM(c.importe) AS monto_facturado_mensual ,DATE_PART('year', c.fecha) AS anio , DATE_PART('month', c.fecha) AS mes
FROM servicio s
JOIN equipo e USING (id_servicio)
JOIN lineacomprobante lc USING (id_servicio)
JOIN comprobante c USING (id_comp, id_tcomp)
WHERE s.periodico = true AND  c.fecha >= NOW() - INTERVAL '8 years'
GROUP BY s.id_servicio, s.nombre, s.periodico, s.costo, s.intervalo, s.tipo_intervalo, s.activo, s.id_cat, DATE_PART('year', c.fecha) , DATE_PART('month', c.fecha)
ORDER BY s.nombre, anio, mes ,monto_facturado_mensual;

SELECT * FROM Vista3;

--////////////// Show Table /////////////////////

SELECT b.* FROM barrio b;

SELECT ciu.* FROM ciudad ciu;

SELECT d.* FROM direccion d;

SELECT per.* FROM persona per;

SELECT p.* FROM personal p;

SELECT r.* FROM rol r;

SELECT tur.* FROM turno tur;

SELECT cli.* FROM cliente cli;

SELECT comp.* FROM comprobante comp;

SELECT lc.* FROM lineacomprobante lc;

SELECT tc.* FROM tipocomprobante tc;

SELECT e.* FROM equipo e;

SELECT l.* FROM lugar l;

SELECT s.* FROM servicio s;

SELECT c.* FROM categoria c;

DELETE FROM turno
WHERE id_turno = 2;


--////////////// DELETE TUPLAS en Table /////////////////////

TRUNCATE TABLE ciudad CASCADE;

TRUNCATE TABLE barrio CASCADE;

TRUNCATE TABLE direccion CASCADE;

TRUNCATE TABLE persona CASCADE;

TRUNCATE TABLE cliente CASCADE;

TRUNCATE TABLE personal CASCADE;

TRUNCATE TABLE rol CASCADE;

TRUNCATE TABLE categoria CASCADE;

TRUNCATE TABLE servicio CASCADE;

TRUNCATE TABLE equipo CASCADE;

TRUNCATE TABLE lugar CASCADE;

TRUNCATE TABLE comprobante CASCADE;

TRUNCATE TABLE tipocomprobante CASCADE;

TRUNCATE TABLE lineacomprobante CASCADE;


